{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1k0pI_Z9oN9Q","executionInfo":{"status":"ok","timestamp":1731312434621,"user_tz":-330,"elapsed":16493,"user":{"displayName":"Aarushi.Mathur Btech2023","userId":"03078316049759708978"}},"outputId":"d9010f3a-b2e6-46ab-aa07-ed328e1fdea4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gradio\n","  Downloading gradio-5.5.0-py3-none-any.whl.metadata (16 kB)\n","Collecting aiofiles<24.0,>=22.0 (from gradio)\n","  Downloading aiofiles-23.2.1-py3-none-any.whl.metadata (9.7 kB)\n","Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.7.1)\n","Collecting fastapi<1.0,>=0.115.2 (from gradio)\n","  Downloading fastapi-0.115.4-py3-none-any.whl.metadata (27 kB)\n","Collecting ffmpy (from gradio)\n","  Downloading ffmpy-0.4.0-py3-none-any.whl.metadata (2.9 kB)\n","Collecting gradio-client==1.4.2 (from gradio)\n","  Downloading gradio_client-1.4.2-py3-none-any.whl.metadata (7.1 kB)\n","Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.27.2)\n","Collecting huggingface-hub>=0.25.1 (from gradio)\n","  Downloading huggingface_hub-0.26.2-py3-none-any.whl.metadata (13 kB)\n","Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.1.4)\n","Collecting markupsafe~=2.0 (from gradio)\n","  Downloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n","Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.26.4)\n","Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.10.10)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from gradio) (24.1)\n","Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.2.2)\n","Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (10.4.0)\n","Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.9.2)\n","Collecting pydub (from gradio)\n","  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n","Collecting python-multipart==0.0.12 (from gradio)\n","  Downloading python_multipart-0.0.12-py3-none-any.whl.metadata (1.9 kB)\n","Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (6.0.2)\n","Collecting ruff>=0.2.2 (from gradio)\n","  Downloading ruff-0.7.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n","Collecting safehttpx<1.0,>=0.1.1 (from gradio)\n","  Downloading safehttpx-0.1.1-py3-none-any.whl.metadata (4.1 kB)\n","Collecting semantic-version~=2.0 (from gradio)\n","  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n","Collecting starlette<1.0,>=0.40.0 (from gradio)\n","  Downloading starlette-0.41.2-py3-none-any.whl.metadata (6.0 kB)\n","Collecting tomlkit==0.12.0 (from gradio)\n","  Downloading tomlkit-0.12.0-py3-none-any.whl.metadata (2.7 kB)\n","Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.12.5)\n","Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.12.2)\n","Collecting uvicorn>=0.14.0 (from gradio)\n","  Downloading uvicorn-0.32.0-py3-none-any.whl.metadata (6.6 kB)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.4.2->gradio) (2024.10.0)\n","Collecting websockets<13.0,>=10.0 (from gradio-client==1.4.2->gradio)\n","  Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.2.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (2024.8.30)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.0.6)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (3.16.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (2.32.3)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (4.66.6)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (2.23.4)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.3)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.16.0)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (3.4.0)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (2.2.3)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n","Downloading gradio-5.5.0-py3-none-any.whl (56.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.7/56.7 MB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading gradio_client-1.4.2-py3-none-any.whl (319 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m319.8/319.8 kB\u001b[0m \u001b[31m23.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_multipart-0.0.12-py3-none-any.whl (23 kB)\n","Downloading tomlkit-0.12.0-py3-none-any.whl (37 kB)\n","Downloading aiofiles-23.2.1-py3-none-any.whl (15 kB)\n","Downloading fastapi-0.115.4-py3-none-any.whl (94 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.7/94.7 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading huggingface_hub-0.26.2-py3-none-any.whl (447 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m447.5/447.5 kB\u001b[0m \u001b[31m28.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n","Downloading ruff-0.7.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.0/11.0 MB\u001b[0m \u001b[31m101.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading safehttpx-0.1.1-py3-none-any.whl (8.4 kB)\n","Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n","Downloading starlette-0.41.2-py3-none-any.whl (73 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.3/73.3 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading uvicorn-0.32.0-py3-none-any.whl (63 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.7/63.7 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ffmpy-0.4.0-py3-none-any.whl (5.8 kB)\n","Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n","Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (130 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.2/130.2 kB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pydub, websockets, uvicorn, tomlkit, semantic-version, ruff, python-multipart, markupsafe, ffmpy, aiofiles, starlette, huggingface-hub, safehttpx, gradio-client, fastapi, gradio\n","  Attempting uninstall: markupsafe\n","    Found existing installation: MarkupSafe 3.0.2\n","    Uninstalling MarkupSafe-3.0.2:\n","      Successfully uninstalled MarkupSafe-3.0.2\n","  Attempting uninstall: huggingface-hub\n","    Found existing installation: huggingface-hub 0.24.7\n","    Uninstalling huggingface-hub-0.24.7:\n","      Successfully uninstalled huggingface-hub-0.24.7\n","Successfully installed aiofiles-23.2.1 fastapi-0.115.4 ffmpy-0.4.0 gradio-5.5.0 gradio-client-1.4.2 huggingface-hub-0.26.2 markupsafe-2.1.5 pydub-0.25.1 python-multipart-0.0.12 ruff-0.7.3 safehttpx-0.1.1 semantic-version-2.10.0 starlette-0.41.2 tomlkit-0.12.0 uvicorn-0.32.0 websockets-12.0\n"]}],"source":["pip install gradio"]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","import gradio as gr\n","\n","# Define individual plotting functions\n","def plot_age_distribution(data):\n","    fig = px.histogram(data, x='Age', nbins=20, title=\"Distribution of Age of Candidates\", color_discrete_sequence=[\"#6abcb0\"])\n","    fig.update_layout(xaxis_title=\"Age\", yaxis_title=\"Frequency\")\n","    return fig\n","\n","def plot_gender_distribution(data):\n","    fig = px.histogram(data, x='Sex', title='Gender Distribution of Candidates', color_discrete_sequence=['maroon'])\n","    fig.update_layout(xaxis_title='Gender', yaxis_title='Number of Candidates')\n","    return fig\n","\n","def plot_vote_share_distribution(data):\n","    plt.figure(figsize=(12, 6))\n","    sns.boxplot(data=data, x='Year', y='Vote_Share_Percentage', palette='cubehelix', hue='Year', dodge=False)\n","    plt.title(\"Distribution of Vote Shares Over the Years\")\n","    plt.xlabel(\"Year\")\n","    plt.xticks(rotation=45)\n","    plt.ylabel(\"Vote Share (%)\")\n","    plt.grid(axis='y')\n","    return plt.gcf()\n","\n","def plot_vote_share_for_incumbents(data):\n","    incumbent_data = data[data['Incumbent'] == True]\n","    avg_vote_share_by_year = incumbent_data.groupby('Year')['Vote_Share_Percentage'].mean().reset_index()\n","    plt.figure(figsize=(10, 6))\n","    sns.lineplot(x='Year', y='Vote_Share_Percentage', data=avg_vote_share_by_year, marker='o', color='teal')\n","    plt.title('Average Vote Share for Incumbents Over Time')\n","    plt.xlabel('Year')\n","    plt.ylabel('Average Vote Share Percentage')\n","    return plt.gcf()\n","\n","def plot_top_10_parties_vote_share(data):\n","    party_vote_share = data.groupby('Party')['Vote_Share_Percentage'].sum()\n","    top_10_parties = party_vote_share.nlargest(10)\n","    fig = px.pie(values=top_10_parties, names=top_10_parties.index, title='Top 10 Parties by Vote Share Percentage')\n","    return fig\n","\n","def plot_vote_share_by_incumbency(data):\n","    plt.figure(figsize=(10, 6))\n","    sns.kdeplot(data=data, x='Vote_Share_Percentage', hue='Incumbent', fill=True)\n","    plt.title(\"Vote Share Distribution by Incumbency Status\")\n","    return plt.gcf()\n","\n","def plot_vote_margins_by_party(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    plt.figure(figsize=(12, 6))\n","    sns.violinplot(x='Party', y='Margin', hue='Party', data=filtered_data, palette=\"Set3\", inner=\"quartile\", dodge=False)\n","    plt.title('Vote Margins by Top 5 Parties')\n","    plt.xlabel('Party')\n","    plt.ylabel('Vote Margin')\n","    return plt.gcf()\n","\n","def plot_success_rate_trend(data):\n","    winners = data[data['Position'] == 1]\n","    top_3_parties_by_wins = winners['Party'].value_counts().head(3)\n","    success_rate = data.groupby(['Party', 'Year'])['Position'].apply(lambda x: (x == 1).sum() / len(x)).reset_index()\n","    success_rate.columns = ['Party', 'Year', 'Success_Rate']\n","    success_rate_top_3_parties = success_rate[success_rate['Party'].isin(top_3_parties_by_wins.index)]\n","    plt.figure(figsize=(10, 6))\n","    sns.lineplot(x='Year', y='Success_Rate', hue='Party', data=success_rate_top_3_parties, palette='plasma')\n","    plt.title('Success Rate Trend Over Time for Top 3 Parties')\n","    plt.xlabel('Year')\n","    plt.ylabel('Success Rate')\n","    return plt.gcf()\n","\n","def plot_candidate_type_by_party(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    plt.figure(figsize=(12, 6))\n","    sns.countplot(x='Party', hue='Candidate_Type', data=filtered_data, palette=\"Set2\")\n","    plt.title('Party Representation by Candidate Type')\n","    plt.tight_layout()\n","    return plt.gcf()\n","\n","def plot_vote_share_vs_age(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    plt.figure(figsize=(10, 6))\n","    sns.scatterplot(data=filtered_data, x='Age', y='Vote_Share_Percentage', hue='Party', alpha=0.6)\n","    plt.title('Scatter Plot of Vote Share Percentage vs Age by Party')\n","    plt.xlabel('Age')\n","    plt.ylabel('Vote Share Percentage')\n","    return plt.gcf()\n","\n","def plot_candidates_by_party(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    plt.figure(figsize=(10, 6))\n","    sns.countplot(data=filtered_data, x='Party', order=filtered_data['Party'].value_counts().index, palette='YlOrBr')\n","    plt.title('Candidates by Party')\n","    plt.xlabel('Party')\n","    plt.ylabel('Number of Candidates')\n","    return plt.gcf()\n","\n","def plot_margin_percentage_vs_age(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    plt.figure(figsize=(10, 6))\n","    sns.regplot(data=filtered_data, x='Age', y='Margin_Percentage', scatter_kws={'alpha': 0.3}, line_kws={'color': 'green'})\n","    plt.title('Regression Plot of Margin Percentage vs Age')\n","    plt.xlabel('Age')\n","    plt.ylabel('Margin Percentage')\n","    return plt.gcf()\n","\n","def plot_pairplot_election_metrics(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    sns.pairplot(filtered_data, vars=['Votes', 'Vote_Share_Percentage', 'Margin', 'Margin_Percentage'], hue='Party', corner=True)\n","    plt.suptitle('Pair Plot of Key Election Metrics', y=1.02)\n","    return plt.gcf()\n","\n","def plot_votes_vs_margin(data):\n","    top_parties = data['Party'].value_counts().index[:5]\n","    filtered_data = data[data['Party'].isin(top_parties)]\n","    sns.jointplot(data=filtered_data, x='Votes', y='Margin', kind='reg')\n","    plt.suptitle('Joint Plot of Votes vs Margin', y=1.02)\n","    return plt.gcf()\n","\n","# Function to load data and create visualizations\n","def load_data_and_visualize(file):\n","    data = pd.read_csv(file.name)\n","\n","    # Create plots and return them in a list\n","    plots = [\n","        plot_age_distribution(data),\n","        plot_gender_distribution(data),\n","        plot_vote_share_distribution(data),\n","        plot_vote_share_for_incumbents(data),\n","        plot_top_10_parties_vote_share(data),\n","        plot_vote_share_by_incumbency(data),\n","        plot_vote_margins_by_party(data),\n","        plot_success_rate_trend(data),\n","        plot_candidate_type_by_party(data),\n","        plot_vote_share_vs_age(data),\n","        plot_candidates_by_party(data),\n","        plot_margin_percentage_vs_age(data),\n","        plot_pairplot_election_metrics(data),\n","        plot_votes_vs_margin(data)\n","    ]\n","\n","    return plots\n","\n","# Gradio app\n","with gr.Blocks() as app:\n","    file_input = gr.File(label=\"Upload CSV File\")\n","    gr.Markdown(\"## Election Data Visualizations\")\n","\n","    # Output container for the 14 plots\n","    plot_outputs = [gr.Plot(label=f\"Plot {i+1}\") for i in range(14)]\n","\n","    # Button to load and visualize the data\n","    load_button = gr.Button(\"Load and Visualize\")\n","\n","    # When the button is clicked, load data and display plots\n","    load_button.click(\n","        fn=load_data_and_visualize,\n","        inputs=file_input,\n","        outputs=plot_outputs\n","    )\n","\n","app.launch()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":650},"id":"kAkaQRppE0eO","executionInfo":{"status":"ok","timestamp":1731309299104,"user_tz":-330,"elapsed":4283,"user":{"displayName":"Aneeka.Jain Btech2023","userId":"16829025308143759947"}},"outputId":"70f74d9c-0878-400e-8cc7-3c27f255bb1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n","\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","* Running on public URL: https://a73696fa5d8c757371.gradio.live\n","\n","This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div><iframe src=\"https://a73696fa5d8c757371.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":[]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import gradio as gr\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from textblob import TextBlob\n","import plotly.express as px\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Load combined data outside the function\n","data = pd.read_csv('/content/combined_cleaned_data.csv')\n","\n","# Preprocess data to add sentiment scores and party columns\n","data['sentiment_score'] = data['cleaned_text'].apply(lambda text: TextBlob(str(text)).sentiment.polarity)\n","parties = ['bjp', 'shiv sena', 'shiv sena ubt', 'congress', 'ncp']\n","for party in parties:\n","    data[party] = data['cleaned_text'].astype(str).apply(lambda x: party in x)\n","\n","# Function to perform analysis and return outputs\n","def sentiment_analysis_and_visualization(sample_size=1000):\n","    sampled_data = data.sample(n=sample_size) if len(data) > sample_size else data\n","\n","    # Calculate average sentiment scores for each party\n","    party_sentiments = {party: sampled_data[sampled_data[party]]['sentiment_score'].mean() for party in parties}\n","    party_sentiment_df = pd.DataFrame(list(party_sentiments.items()), columns=['Party', 'Average_Sentiment'])\n","\n","    # Plot average sentiment scores\n","    fig1 = px.bar(\n","        party_sentiment_df,\n","        x='Party',\n","        y='Average_Sentiment',\n","        color='Average_Sentiment',\n","        color_continuous_scale='viridis',\n","        title='Average Sentiment Score by Political Party'\n","    )\n","    fig1.update_layout(xaxis_title=\"Political Party\", yaxis_title=\"Average Sentiment Score\")\n","\n","    # Prepare data for regression model\n","    X = party_sentiment_df[['Average_Sentiment']]\n","    y = [1 if sentiment > 0 else 0 for sentiment in party_sentiment_df['Average_Sentiment']]\n","\n","    # Train-test split\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    # Train model and evaluate\n","    model = LinearRegression()\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","    mse = mean_squared_error(y_test, y_pred)\n","    r2 = r2_score(y_test, y_pred)\n","\n","    # Create the heatmap\n","    fig2 = px.imshow(\n","        party_sentiment_df[['Average_Sentiment']].T,\n","        labels=dict(x=\"Party\", y=\"Sentiment Type\", color=\"Sentiment Score\"),\n","        x=party_sentiment_df['Party'],\n","        y=['Average Sentiment'],\n","        color_continuous_scale='RdYlGn',\n","        title=\"Sentiment Scores Affecting Political Parties\"\n","    )\n","    fig2.update_layout(xaxis_title=\"Political Party\", yaxis_title=\"Sentiment Type\")\n","\n","    return fig1, fig2, f\"Mean Squared Error: {mse:.4f}\", f\"R-squared: {r2:.4f}\"\n","\n","# Set up Gradio interface with reduced sample size\n","interface = gr.Interface(\n","    fn=sentiment_analysis_and_visualization,\n","    inputs=gr.Slider(100, 5000, step=100, value=1000, label=\"Sample Size\"),\n","    outputs=[\"plot\", \"plot\", \"text\", \"text\"],\n","    title=\"Political Sentiment Analysis\",\n","    description=\"Analyze and visualize sentiment scores for political parties, with regression analysis.\"\n",")\n","\n","interface.launch()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"id":"_7bmVb3Zg86F","executionInfo":{"status":"ok","timestamp":1731312452869,"user_tz":-330,"elapsed":14074,"user":{"displayName":"Aarushi.Mathur Btech2023","userId":"03078316049759708978"}},"outputId":"dcd671ba-8bea-4d89-f339-6ce39d0fbd23"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n","\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","* Running on public URL: https://0893a3016b13dfd448.gradio.live\n","\n","This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div><iframe src=\"https://0893a3016b13dfd448.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":[]},"metadata":{},"execution_count":3}]}]}